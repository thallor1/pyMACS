{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cbc59ec5-24a2-46e2-88fa-77347612c14a",
   "metadata": {},
   "source": [
    "## Simulation of measured TiO2 111 peak"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5185a8ec-cddb-467a-8888-1560900bd072",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: Overwriting previous total file TiO2_111_total.csv\n",
      "#########################\n",
      "Old simulations found in /mnt/c/Users/tjh/OneDrive - NIST/pyMACS/Paper Calculations/TiO2 110 Bragg Peak/TiO2_111/Kidney_simulations/\n",
      " \n",
      "Successfully combined old simulations into /mnt/c/Users/tjh/OneDrive - NIST/pyMACS/Paper Calculations/TiO2 110 Bragg Peak/TiO2_111/Kidney_simulations/TiO2_111_total.csv\n",
      "\n",
      "Data matrix instantiated and ready to use.\n",
      "#########################\n",
      " \n",
      "Conversion of CIF to crystallographical LAU file successful. \n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import sys\n",
    "#Add the directory of the module to the path.\n",
    "#sys.path.append('/media/sf_OneDrive_-_Johns_Hopkins/pyMACS/pyMACS')\n",
    "from pyMACS.virtualMACS import VirtualMACS\n",
    "import mcstasscript as ms\n",
    "\n",
    "\n",
    "macs = VirtualMACS('TiO2_111',cifName='TiO2.cif')\n",
    "macs.sample.formula_weight=79.87\n",
    "macs.sample.sample_widx=5e-3\n",
    "macs.sample.sample_widz=5e-3\n",
    "macs.sample.sample_widy=5e-3\n",
    "macs.sample.cif2lau()\n",
    "#Sample was oriented in the (HHL) plane, like so\n",
    "macs.sample.orient_u=[1,1,0]\n",
    "macs.sample.orient_v=[0,0,1]\n",
    "macs.sample.project_sample_realspace()\n",
    "\n",
    "#Assign simulation counts\n",
    "macs.n_mono=1e7\n",
    "macs.n_sample=1e6\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8a5b382c-1cd4-4737-8db8-b600d90c04ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/mnt/c/Users/tjh/OneDrive - NIST/GitHub/pyMACS/pyMACS\n",
      "/mnt/c/Users/tjh/OneDrive - NIST/pyMACS/Paper Calculations/TiO2 110 Bragg Peak\n",
      "#################\n",
      "\n",
      "Starting compilation of sample kidney geometry.\n",
      "\n",
      "Compilation of sample kidney geometry successful.\n",
      "\n",
      "#################\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scattering_def = ms.McStas_instr(\"scattering_definition\",checks=False)\n",
    "inc_scatter = scattering_def.add_component(\"inc_scatter\",\"Incoherent_process\")\n",
    "inc_scatter.sigma=macs.sample.sigma_inc\n",
    "inc_scatter.unit_cell_volume = macs.sample.cell_vol\n",
    "inc_scatter.packing_factor = 1\n",
    "inc_scatter.set_AT([0,0,0])\n",
    "\n",
    "#Single crystal process. \n",
    "crystal_scatter = scattering_def.add_component(\"crystal_scatter\",\"Single_crystal_process\")\n",
    "crystal_scatter.delta_d_d=0.005\n",
    "crystal_scatter.mosaic = 30.0\n",
    "#Projections of lattice vectors onto lab frame is handled by the previous helper process.\n",
    "labproj = macs.sample.labframe_mat\n",
    "crystal_scatter.ax = labproj[0,0]\n",
    "crystal_scatter.ay = labproj[0,1]\n",
    "crystal_scatter.az = labproj[0,2]\n",
    "crystal_scatter.bx = labproj[1,0]\n",
    "crystal_scatter.by = labproj[1,1]\n",
    "crystal_scatter.bz = labproj[1,2]\n",
    "crystal_scatter.cx = labproj[2,0]\n",
    "crystal_scatter.cy = labproj[2,1]\n",
    "crystal_scatter.cz = labproj[2,2]\n",
    "crystal_scatter.reflections='\\\"'+\"TiO2.lau\"+'\\\"'\n",
    "crystal_scatter.barns=1\n",
    "crystal_scatter.packing_factor=1\n",
    "crystal_scatter.powder=0\n",
    "crystal_scatter.PG=0\n",
    "crystal_scatter.interact_fraction=0.8\n",
    "crystal_scatter.set_AT([0,0,0])\n",
    "crystal_scatter.set_ROTATED([0,0,0])\n",
    "\n",
    "scattering = scattering_def.add_component(\"TiO2\",\"Union_make_material\")\n",
    "scattering.process_string='\"crystal_scatter,inc_scatter\"'\n",
    "scattering.my_absorption=macs.sample.rho_abs\n",
    "scattering.set_AT([0,0,0])\n",
    "\n",
    "#Now, this pseudo-instrument will be saved as the scattering definition of the sample. \n",
    "macs.sample.scattering_def = scattering_def\n",
    "\n",
    "#Make a second object for the geometry. This particular case replicates the validation experiment for this package.\n",
    "geo_def = ms.McStas_instr(\"geometry_definition\",checks=False)\n",
    "\n",
    "sample_cube=geo_def.add_component(\"sample_cube\",\"Union_box\")\n",
    "sample_cube.xwidth=1.0*macs.sample.sample_widx\n",
    "sample_cube.yheight=1.0*macs.sample.sample_widy\n",
    "sample_cube.zdepth=1.0*macs.sample.sample_widz\n",
    "sample_cube.priority=100\n",
    "sample_cube.material_string='\\\"TiO2\\\"'\n",
    "sample_cube.number_of_activations=\"number_of_activations_sample\" #Do not change. \n",
    "sample_cube.set_AT([0,0,0],RELATIVE='crystal_assembly')\n",
    "sample_cube.set_ROTATED([0,0,0],RELATIVE='crystal_assembly')\n",
    "'''\n",
    "sample_cube_mask1 = geo_def.add_component(\"sample_cube_mask1\",\"Union_box\") #It's easier to rotate a mask rather than the sample itself.\n",
    "sample_cube_mask1.xwidth=macs.sample.sample_widx\n",
    "sample_cube_mask1.yheight=macs.sample.sample_widy\n",
    "sample_cube_mask1.zdepth=macs.sample.sample_widz\n",
    "sample_cube_mask1.priority=0\n",
    "sample_cube_mask1.material_string='\"Mask\"'\n",
    "sample_cube_mask1.number_of_activations=\"number_of_activations_sample\"\n",
    "sample_cube_mask1.mask_string='\"sample_cube\"'\n",
    "sample_cube_mask1.mask_setting='\"All\"'\n",
    "sample_cube_mask1.visualize=0\n",
    "sample_cube_mask1.set_AT([0,0,0],RELATIVE=\"crystal_assembly\")\n",
    "sample_cube_mask1.set_ROTATED([0,0,0], RELATIVE=\"crystal_assembly\")\n",
    "'''\n",
    "sample_plate = geo_def.add_component(\"sample_plate\",\"Union_cylinder\")\n",
    "sample_plate.radius=0.006\n",
    "sample_plate.yheight=0.002\n",
    "sample_plate.priority=40\n",
    "sample_plate.material_string='\"Al\"'\n",
    "plate_distance = macs.sample.sample_widy+0.002\n",
    "sample_plate.set_AT([0,plate_distance,0],RELATIVE=\"target\")\n",
    "sample_plate.set_ROTATED([0,0,0],RELATIVE=\"target\")\n",
    "\n",
    "sample_plate_rod = geo_def.add_component(\"sample_plate_rod\",\"Union_cylinder\")\n",
    "sample_plate_rod.radius=0.00125\n",
    "sample_plate_rod.yheight=0.0633\n",
    "sample_plate_rod.priority=41\n",
    "sample_plate_rod.material_string='\"Al\"'\n",
    "sample_plate_rod.set_AT([0,plate_distance+0.001+0.031,0], RELATIVE=\"target\")\n",
    "sample_plate_rod.set_ROTATED([0,0,0],RELATIVE=\"target\")\n",
    "\n",
    "sample_base = geo_def.add_component(\"sample_base\",\"Union_cylinder\")\n",
    "sample_base.radius=0.0065\n",
    "sample_base.yheight=0.013\n",
    "sample_base.priority=42\n",
    "sample_base.material_string='\\\"Al\\\"'\n",
    "sample_base.set_AT([0,0.0628,0],RELATIVE=\"target\")\n",
    "sample_base.set_ROTATED([0,0,0],RELATIVE=\"target\")\n",
    "\n",
    "sample_base_gap = geo_def.add_component(\"sample_base_gap\",\"Union_cylinder\")\n",
    "sample_base_gap.radius=0.004\n",
    "sample_base_gap.yheight=0.009\n",
    "sample_base_gap.priority=43\n",
    "sample_base_gap.material_string='\"Vacuum\"'\n",
    "sample_base_gap.set_AT([0,0.0668,0], RELATIVE=\"target\")\n",
    "sample_base_gap.set_ROTATED([0,0,0],RELATIVE=\"target\")\n",
    "\n",
    "macs.sample.geometry_def = geo_def\n",
    "\n",
    "macs.useOld=True\n",
    "\n",
    "useOld=True\n",
    "if useOld==True:\n",
    "    macs.useOld=True\n",
    "    #macs.prepare_old_expt_directory()\n",
    "    #macs.clean_expt_directory()\n",
    "else:\n",
    "    macs.data.data_matrix=False\n",
    "    #macs.clean_expt_directory()\n",
    "    macs.prepare_expt_directory()\n",
    "    macs.compileMonochromator()\n",
    "macs.prepare_expt_directory()\n",
    "\n",
    "macs.edit_instr_file()\n",
    "macs.compileInstr()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ce0a8cca-5130-4294-888e-4ea8879153b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "scan_dir = 'TiO2_110 ng0 files/'\n",
    "#macs.simulate_ng0dir(scan_dir,n_threads=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2b7a0128-ef3f-4ac9-8f94-31d2dfbad216",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Save the scan in one large csv file \n",
    "#macs.data.combine_csv_scans(preserve_old=True,flagstr='fpx')\n",
    "macs.data.load_data_matrix_from_csv('fpx_dataMatrix.csv')\n",
    "#macs.data.combine_all_csv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c21d7cce-e8b7-4dfb-ad70-ee7a4984f1d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import glob\n",
    "macs.data.project_data_QE(PTAI=True,which_data='mcstas')\n",
    "\n",
    "\n",
    "ng0_files = glob.glob(scan_dir+'*.ng0')\n",
    "for f in ng0_files:\n",
    "    macs.data.import_ng0_to_matrix(f)\n",
    "macs.data.project_data_QE(PTAI=True,which_data='macs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1dc5aa47-6c31-49ee-9c2a-409485273fc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Qnet = [-1.93164  0.       0.     ]\n",
      "Qnet = [-1.93164  0.       0.     ]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f339e90e1a0>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pyMACS\n",
    "cmap=\"viridis\"\n",
    "fig,ax = plt.subplots(2,3,figsize=(8,4))\n",
    "\n",
    "fig.subplots_adjust(hspace=0.5,wspace=0.5)\n",
    "U,V,I,Err = macs.data.take_slice([-1.05,-0.95,24],[-0.1,0.1,24],[-0.07,0.07],which_data='macs')\n",
    "ax[0,0].pcolormesh(U,V,I.T,cmap=cmap,vmin=0,vmax=3e-4)\n",
    "ax[0,0].set_xlabel('[HH0]')\n",
    "ax[0,0].set_ylabel('[00L]')\n",
    "#ax[0,0].set_title(\"TiO2, MACS\")\n",
    "\n",
    "U,V,I,Err = macs.data.take_slice([-1.05,-0.95,22],[-0.03,0.03],[-0.6,0.6,11],which_data='macs')\n",
    "ax[0,1].pcolormesh(U,V,I.T,cmap=cmap,vmin=0,vmax=1e-4)\n",
    "ax[0,1].set_xlabel('[HH0]')\n",
    "ax[0,1].set_ylabel('E (meV)')\n",
    "#ax[0,1].set_title(\"TiO2, MACS\")\n",
    "\n",
    "U,V,I,Err = macs.data.take_slice([-1.05,-0.95],[-0.1,0.1,22],[-0.6,0.6,11],which_data='macs')\n",
    "\n",
    "ax[0,2].pcolormesh(U,V,I.T,cmap=cmap,vmin=0,vmax=2e-5)\n",
    "ax[0,2].set_xlabel('[00L]')\n",
    "ax[0,2].set_ylabel('E (meV)')\n",
    "#ax[0,2].set_title(\"TiO2 , MACS\")\n",
    "\n",
    "\n",
    "U,V,I,Err = macs.data.take_slice([-1.05,-0.95,24],[-0.1,0.1,24],[-0.07,0.07],which_data='mcstas')\n",
    "ax[1,0].pcolormesh(U,V,I.T,cmap=cmap,vmin=0,vmax=7e1)\n",
    "ax[1,0].set_xlabel('[HH0]')\n",
    "ax[1,0].set_ylabel('[00L]')\n",
    "#ax[1,0].set_title(\"TiO2, McStas\")\n",
    "\n",
    "U,V,I,Err = macs.data.take_slice([-1.05,-0.95,22],[-0.03,0.03],[-0.6,0.6,11],which_data='mcstas')\n",
    "#fig,ax = plt.subplots(1,2,figsize=(5,3),sharex=True,sharey=True)\n",
    "ax[1,1].pcolormesh(U,V,I.T,cmap=cmap,vmin=0,vmax=4e1)\n",
    "ax[1,1].set_xlabel('[HH0]')\n",
    "ax[1,1].set_ylabel('E (meV)')\n",
    "#ax[1,1].set_title(\"TiO2, MACS\")\n",
    "\n",
    "U,V,I,Err = macs.data.take_slice([-1.05,-0.95],[-0.1,0.1,22],[-0.6,0.6,11],which_data='mcstas')\n",
    "\n",
    "ax[1,2].pcolormesh(U,V,I.T,cmap=cmap)\n",
    "ax[1,2].set_xlabel('[00L]')\n",
    "ax[1,2].set_ylabel('E (meV)')\n",
    "#ax[1,2].set_title(\"TiO2 , MACS\")\n",
    "#fig.savefig(\"TiO2_A3scan_test.pdf\",bbox_inches=\"tight\")\n",
    "\n",
    "#Overplot the tabulated resolution ellipsoid\n",
    "qvec = np.array([-1.0,-1.0,0.0])\n",
    "\n",
    "qxpt,qzpt = pyMACS.scripting.hkl_to_labframe(qvec[0],qvec[1],0,macs)\n",
    "M_load,M_diag_load,Q_hkw_load = pyMACS.scripting.macs_resfunc(qvec[0],qvec[1],0.0,0.0,5.0,macsobj=macs,\n",
    "                                             gen_plot=False,verbose=False,calc_mode=\"load_cov\")\n",
    "\n",
    "ellips, proj_ellips = pyMACS.scripting.res_ellipses(M_load,Qmean=np.array([-1.0,0,0]),macsobj=macs)\n",
    "\n",
    "#Small deviations in Q to account for misalignment in experiment\n",
    "ax[1,0].plot(ellips[0][0,:],ellips[0][1,:],'r-')\n",
    "ax[1,1].plot(ellips[1][0,:],ellips[1][1,:],'r-')\n",
    "ax[1,2].plot(ellips[2][0,:],ellips[2][1,:],'r-')\n",
    "ax[1,0].plot(proj_ellips[0][0,:],proj_ellips[0][1,:],'r--')\n",
    "ax[1,1].plot(proj_ellips[1][0,:],proj_ellips[1][1,:],'r--')\n",
    "ax[1,2].plot(proj_ellips[2][0,:],proj_ellips[2][1,:],'r--')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e186929b-e966-45d1-ad08-aa1dfd9ff77b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
